###This configuration not enable coroutine or thread pool.

###you can uncomment next two lines for easy debug
daemon  off;
###Warning: if master_process is off, there will be only one nginx worker running. Only use it for debug propose.
#master_process  off;

#user  nobody;
###you can set worker_processes =1 for easy debug
###if master_process is off, the count of worker processes will be 1 regardless of worker_processes settings
worker_processes  1;


error_log   logs/error.log;
#error_log   logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    #debug_connection 127.0.0.1;
    multi_accept on;
    #accept_mutex off;
    #reuse_port on;
}



http {

   

    include       mime.types;
    default_type  text/html;
    
    max_balanced_tcp_connections 1024;

    sendfile  on;
    tcp_nopush  on;
    tcp_nodelay on;
    keepalive_timeout   65;
    keepalive_requests  100000;
    server_tokens off;
    reset_timedout_connection on;
    send_timeout 5;


    #gzip  on;

    proxy_cache_path /tmp/proxy_cache levels=1:2 keys_zone=cache_product:200m inactive=1m max_size=1g;

    jvm_path "/usr/lib/jvm/java-7-oracle/jre/lib/amd64/server/libjvm.so";
    #jvm_path "/usr/lib/jvm/jdk1.8.0_11/jre/lib/amd64/server/libjvm.so";
    
    
    jvm_var ncdev '/home/who/git/nginx-clojure';
    jvm_var mrr '/home/who/.m2/repository';
    jvm_var ncjar '#{ncdev}/target/nginx-clojure-0.4.3.jar';

    
    ###run tool mode , 't' means Tool
    #jvm_options "-javaagent:#{ncjar}=tmb";
    ###Setting Output Path of Waving Configuration File, default is $nginx-workdir/nginx.clojure.wave.CfgToolOutFile
    #jvm_options "-Dnginx.clojure.wave.CfgToolOutFile=/tmp/my-wave-cfg.txt";
    
    ###coroutine enabled mode
    #jvm_options "-javaagent:#{ncjar}=mb";
    ###for win32, class path seperator is ";"
    #jvm_options "-Xbootclasspath/a:#{ncjar}:#{mrr}/org/clojure/clojure/1.5.1/clojure-1.5.1.jar";
   
   
    ###wave log level, default is error
    #jvm_options "-Dnginx.clojure.logger.wave.level=info";
    
    jvm_options "-Dnginx.clojure.logger.socket.level=error";
    
    ###nginx clojure log level, default is info
    jvm_options "-Dnginx.clojure.logger.level=info";

    #jvm_options "-Dnginx.clojure.wave.trace.classmethodpattern=sun.reflect.*|nginx.*|org.org.codehaus.groovy.*|java.lang.reflect.*|groovy.*";
    #jvm_options "-Dnginx.clojure.wave.trace.classpattern=com.mysql.jdbc.StatementImpl";

    ###including ring-core & compojure & clj-http & clj-jdbc & mysql-connector-java for test
    jvm_classpath "#{ncdev}/bin:#{ncjar}:coroutine-udfs:#{ncdev}/bin";
    
    
    ###setting user defined class waving configuration files which are in the above boot classpath
    #jvm_options "-Dnginx.clojure.wave.udfs=compojure-http-clj.txt,mysql-jdbc.txt,test-groovy.txt";
    
    ###for enable java remote debug uncomment next two lines, make sure "master_process = off"
    jvm_options "-Xdebug";
    jvm_options "-Xrunjdwp:server=y,transport=dt_socket,address=840#{pno},suspend=n";
    
    #for outofmemory dump
    #jvm_options "-XX:+HeapDumpOnOutOfMemoryError";
    
    #jvm_options "-Xverify:none";
    #jvm_options "-XX:+UseSerialGC";
    # jvm_options "-XX:MaxGCPauseMillis=25";
    #jvm_options "-XX:+UseG1GC";
    
    #jvm_options "-Xms512m";
    #jvm_options "-Xmx512m";
    

    #If jvm_workers > 0 and coroutine disabled, it is threads number (per nginx worker) for request handler thread pool on jvm. 
    #jvm_workers 16;
    
    jvm_handler_type 'java';
    
    

    
    #handlers_lazy_init off;

    
    server {
        listen       8080;
        server_name  localhost;
       
       #uncomment this two lines for performance test 
        access_log off;
#	     error_log /dev/null crit;

      location / {
          content_handler_name 'nginx.clojure.bridge.NginxBridgeHandler';
          
          ##Tomcat 8 installation path
          content_handler_property system.catalina.home '/home/who/share/apps/apache-tomcat-8.0.28';
          #content_handler_property system.catalina.home '/home/who/git/tomcat80/output/build';
          content_handler_property system.catalina.base '#{catalina.home}';
          
          ##configure JRE to use a non-blocking entropy source and we get fast startup when nginx worker > 1
          content_handler_property system.java.security.egd 'file:/dev/./urandom';
          
          ##uncomment this to disable websocket perframe-compression
          content_handler_property system.org.apache.tomcat.websocket.DISABLE_BUILTIN_EXTENSIONS true;
          
          ##log manger
          content_handler_property system.java.util.logging.manager 'org.apache.juli.ClassLoaderLogManager';
          
          ## all jars or direct child directories will be appended into the classpath of this bridge handler's class-loader
          content_handler_property bridge.lib.dirs '#{catalina.home}/lib:#{catalina.home}/bin';
          
          ##set nginx tomcat8 bridge implementation jar and other jars can also be appended here
          content_handler_property bridge.lib.cp '#{catalina.home}/conf:/home/who/git/nginx-clojure/nginx-tomcat8/bin';
          
          ##The implementation class of nginx-clojure bridge handler for Tomcat 8
          content_handler_property bridge.imp 'nginx.clojure.tomcat8.NginxTomcatBridge';
          
          ##ignore nginx filter, default is false
          #content_handler_property ignoreNginxFilter false;
          
          ##when dispatch is false tomcat servlet will be executed in main thread.By default dispatch is false
          ##when use websocket with tomcat it must be set true otherwise maybe deadlock will happen.
          content_handler_property dispatch true;
          
          gzip on;
          gzip_types text/plain text/css 'text/html;charset=ISO-8859-1' 'text/html;charset=UTF-8'; 
          
          ##if for small message, e.g. small json/websocket message write_page_size can set to be a small value
          #write_page_size 2k;
      }
      
      
      location /java-ws {
        auto_upgrade_ws on;
        handler_type 'java';
        location /java-ws/echo {
          content_handler_name 'nginx.clojure.java.WebSocketTestSet4NginxJavaRingHandler$WSEcho';
        }
        location /java-ws/echo.xhtml {
          alias /home/who/git/tomcat80/webapps/examples/websocket/echo.xhtml;
        }
      }
       
      location /dump {
         handler_type 'java';
         handler_name 'nginx.clojure.java.WaveConfigurationDumpHandler';       
      }
             

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
